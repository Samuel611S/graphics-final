
 -------------------- aesthetic.js ------------------------ 

function applyAestheticFilter(inputImage) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);

    // Step 1: Apply a color tint (e.g., a soft pink or teal tone)
    outputImage.loadPixels();
    for (let i = 0; i < outputImage.pixels.length; i += 4) {
        outputImage.pixels[i] += 30;    // Red Channel
        outputImage.pixels[i + 1] += 10; // Green Channel
        outputImage.pixels[i + 2] += 50; // Blue Channel
    }
    outputImage.updatePixels();

    // Step 2: Apply a vignette effect
    outputImage = applyVignette(outputImage);

    // Step 3: Apply a slight blur to soften the image
    outputImage = applyGaussianBlur(outputImage);

    return outputImage;
}

function applyVignette(inputImage) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);

    let centerX = inputImage.width / 2;
    let centerY = inputImage.height / 2;
    let maxDistance = dist(0, 0, centerX, centerY);

    outputImage.loadPixels();
    for (let x = 0; x < inputImage.width; x++) {
        for (let y = 0; y < inputImage.height; y++) {
            let d = dist(x, y, centerX, centerY);
            let vignetteFactor = map(d, 0, maxDistance, 1, 0.4);  // Vignette strength

            let index = (y * inputImage.width + x) * 4;
            outputImage.pixels[index] *= vignetteFactor;    // Red Channel
            outputImage.pixels[index + 1] *= vignetteFactor; // Green Channel
            outputImage.pixels[index + 2] *= vignetteFactor; // Blue Channel
        }
    }
    outputImage.updatePixels();

    return outputImage;
}

 -------------------- colorHaftone.js ------------------------ 

function applyColorHalftoneFilter(inputImage, dotSize) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);
    outputImage.loadPixels();
    inputImage.loadPixels();

    for (let y = 0; y < outputImage.height; y += dotSize) {
        for (let x = 0; x < outputImage.width; x += dotSize) {
            let c = inputImage.get(x, y);
            let r = red(c);
            let g = green(c);
            let b = blue(c);

            // Draw a filled circle with color at the original position
            for (let dy = 0; dy < dotSize; dy++) {
                for (let dx = 0; dx < dotSize; dx++) {
                    let px = x + dx;
                    let py = y + dy;
                    if (px < outputImage.width && py < outputImage.height) {
                        let d = dist(px, py, x + dotSize / 2, y + dotSize / 2);
                        if (d < dotSize / 2) {
                            let index = (px + py * outputImage.width) * 4;
                            outputImage.pixels[index] = r;       // Red
                            outputImage.pixels[index + 1] = g;   // Green
                            outputImage.pixels[index + 2] = b;   // Blue
                        }
                    }
                }
            }
        }
    }

    outputImage.updatePixels();
    return outputImage;
}

 -------------------- colorShifting.js ------------------------ 

function applyColorShiftingFilter(inputImage, shiftAmount) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);

    outputImage.loadPixels();
    for (let i = 0; i < outputImage.pixels.length; i += 4) {
        outputImage.pixels[i] = (outputImage.pixels[i] + shiftAmount) % 256;        // Red Channel
        outputImage.pixels[i + 1] = (outputImage.pixels[i + 1] + shiftAmount) % 256; // Green Channel
        outputImage.pixels[i + 2] = (outputImage.pixels[i + 2] + shiftAmount) % 256; // Blue Channel
    }
    outputImage.updatePixels();

    return outputImage;
}

 -------------------- colourspace.js ------------------------ 

function convertToTCbCr(inputImage) {
    let tcbrImage = createImage(inputImage.width, inputImage.height);
    tcbrImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, tcbrImage.width, tcbrImage.height);
  
    tcbrImage.loadPixels();

    for (let i = 0; i < tcbrImage.pixels.length; i += 4) {
        let red = tcbrImage.pixels[i];
        let green = tcbrImage.pixels[i + 1];
        let blue = tcbrImage.pixels[i + 2];

        // Transform RGB to YCbCr color components
        let Y = (0.299 * red) + (0.587 * green) + (0.114 * blue);
        let Cb = (-0.1687 * red) - (0.3313 * green) + (0.5 * blue) + 128;
        let Cr = (0.5 * red) - (0.4187 * green) - (0.0813 * blue) + 128;

        // Set the YCbCr values to pixels
        tcbrImage.pixels[i] = Y;
        tcbrImage.pixels[i + 1] = Cb;
        tcbrImage.pixels[i + 2] = Cr;
    }
    
    tcbrImage.updatePixels();
    return tcbrImage;
}
  
function convertToHSV(inputImage) {
    let hsvImage = createImage(inputImage.width, inputImage.height);
    hsvImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, hsvImage.width, hsvImage.height);
  
    hsvImage.loadPixels();
    
    for (let i = 0; i < hsvImage.pixels.length; i += 4) {
        let red = hsvImage.pixels[i] / 255;
        let green = hsvImage.pixels[i + 1] / 255;
        let blue = hsvImage.pixels[i + 2] / 255;
  
        let maxVal = Math.max(red, green, blue);
        let minVal = Math.min(red, green, blue);
        let diff = maxVal - minVal;

        let hue = 0;
        let saturation = maxVal === 0 ? 0 : (diff / maxVal) * 100;
        let value = maxVal * 100;

        if (diff !== 0) {
            if (maxVal === red) {
                hue = ((green - blue) / diff) % 6;
            } else if (maxVal === green) {
                hue = (blue - red) / diff + 2;
            } else {
                hue = (red - green) / diff + 4;
            }
        }
  
        // Adjust hue to be in degrees
        hue = Math.round(hue * 60);
        if (hue < 0) hue += 360;
        
        // Set the HSV values to pixels
        hsvImage.pixels[i] = hue;
        hsvImage.pixels[i + 1] = saturation;
        hsvImage.pixels[i + 2] = value;
    }
    
    hsvImage.updatePixels();
    return hsvImage;
}
 -------------------- colourspaceThresholding.js ------------------------ 

function applyThresholdToColorSpace(sourceImage, thresholdValue, slider) {
    let resultImage = createImage(sourceImage.width, sourceImage.height);
    resultImage.copy(sourceImage, 0, 0, sourceImage.width, sourceImage.height, 0, 0, resultImage.width, resultImage.height);

    resultImage.loadPixels();
    for (let i = 0; i < resultImage.pixels.length; i += 4) {
        let redChannel = resultImage.pixels[i];
        let greenChannel = resultImage.pixels[i + 1];
        let blueChannel = resultImage.pixels[i + 2];

        // Compute the intensity based on RGB values
        let colorIntensity = calculateColorIntensity(redChannel, greenChannel, blueChannel);

        // Apply threshold based on slider position
        colorIntensity = (slider.value() > colorIntensity) ? 0 : colorIntensity;

        // Set the new pixel values after thresholding
        resultImage.pixels[i] = redChannel * (colorIntensity / 255);    // Red
        resultImage.pixels[i + 1] = greenChannel * (colorIntensity / 255); // Green
        resultImage.pixels[i + 2] = blueChannel * (colorIntensity / 255);  // Blue

        // Keep the alpha channel unchanged
        resultImage.pixels[i + 3] = resultImage.pixels[i + 3];
    }
    resultImage.updatePixels();

    return resultImage;
}

function calculateColorIntensity(r, g, b) {
    // Calculate intensity from RGB values
    return (r + g + b) / 1.7;
}

function applyTCbCrThreshold(sourceImage) {
    let thresholdValue = tcbrThresholdSlider.value(); 
    let tcbrConvertedImage = convertToTCbCr(sourceImage); 
    let thresholdedResult = applyThresholdToColorSpace(tcbrConvertedImage, thresholdValue, tcbrThresholdSlider);
    return thresholdedResult;
}

function applyHSVThreshold(sourceImage) {
    let hsvThresholdValue = hsvThresholdSlider.value(); 
    let hsvConvertedImage = convertToHSV(sourceImage); 
    let thresholdedResult = applyThresholdToColorSpace(hsvConvertedImage, hsvThresholdValue, hsvThresholdSlider);
    return thresholdedResult;
}


 -------------------- embossEffect.js ------------------------ 

function applyEmbossEffect(inputImage) {
    // Clone the inputImage to avoid modifying the original image
    let embossImage = inputImage.get();
    embossImage.loadPixels();
    let pixels = embossImage.pixels;

    // Define the emboss kernel matrix
    let kernel = [
        [-2, -1, 0],
        [-1, 1, 1],
        [0, 1, 2]
    ];

    // Apply convolution matrix to each pixel
    for (let y = 1; y < embossImage.height - 1; y++) {
        for (let x = 1; x < embossImage.width - 1; x++) {
            let index = (x + y * embossImage.width) * 4;

            let r = 0, g = 0, b = 0;

            // Apply kernel to the surrounding pixels
            for (let ky = -1; ky <= 1; ky++) {
                for (let kx = -1; kx <= 1; kx++) {
                    let imgX = x + kx;
                    let imgY = y + ky;
                    let imgIndex = (imgX + imgY * embossImage.width) * 4;

                    let weight = kernel[ky + 1][kx + 1];

                    r += pixels[imgIndex] * weight;
                    g += pixels[imgIndex + 1] * weight;
                    b += pixels[imgIndex + 2] * weight;
                }
            }

            // Set the new pixel values
            embossImage.pixels[index] = constrain(r + 128, 0, 255);
            embossImage.pixels[index + 1] = constrain(g + 128, 0, 255);
            embossImage.pixels[index + 2] = constrain(b + 128, 0, 255);
        }
    }

    embossImage.updatePixels();
    return embossImage;
}
 -------------------- gaussianBlur.js ------------------------ 

function applyGaussianBlur(inputImage) {
    let blurImage = inputImage.get();
    blurImage.loadPixels();
    let pixels = blurImage.pixels;

    let kernel = [
        [1 / 16, 2 / 16, 1 / 16],
        [2 / 16, 4 / 16, 2 / 16],
        [1 / 16, 2 / 16, 1 / 16]
    ];

    for (let y = 1; y < blurImage.height - 1; y++) {
        for (let x = 1; x < blurImage.width - 1; x++) {
            let index = (x + y * blurImage.width) * 4;

            let r = 0, g = 0, b = 0;

            for (let ky = -1; ky <= 1; ky++) {
                for (let kx = -1; kx <= 1; kx++) {
                    let imgX = x + kx;
                    let imgY = y + ky;
                    let imgIndex = (imgX + imgY * blurImage.width) * 4;

                    let weight = kernel[ky + 1][kx + 1];

                    r += pixels[imgIndex] * weight;
                    g += pixels[imgIndex + 1] * weight;
                    b += pixels[imgIndex + 2] * weight;
                }
            }

            blurImage.pixels[index] = constrain(r, 0, 255);
            blurImage.pixels[index + 1] = constrain(g, 0, 255);
            blurImage.pixels[index + 2] = constrain(b, 0, 255);
        }
    }

    blurImage.updatePixels();
    return blurImage;
}
 -------------------- glitch.js ------------------------ 

function applyGlitchFilter(inputImage) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);

    // Step 1: Randomly shift rows
    for (let y = 0; y < outputImage.height; y += 10) {
        let shift = int(random(-20, 20));
        outputImage.copy(outputImage, 0, y, outputImage.width, 10, shift, y, outputImage.width, 10);
    }

    // Step 2: Randomly shift columns
    for (let x = 0; x < outputImage.width; x += 10) {
        let shift = int(random(-10, 10));
        outputImage.copy(outputImage, x, 0, 10, outputImage.height, x, shift, 10, outputImage.height);
    }

    // Step 3: Add random noise
    outputImage.loadPixels();
    for (let i = 0; i < outputImage.pixels.length; i += 4) {
        if (random(1) < 0.1) { // 10% chance to add noise
            let noiseValue = int(random(-50, 50));
            outputImage.pixels[i] += noiseValue;     // Red Channel
            outputImage.pixels[i + 1] += noiseValue; // Green Channel
            outputImage.pixels[i + 2] += noiseValue; // Blue Channel
        }
    }
    outputImage.updatePixels();

    // Step 4: Apply a final random color offset
    let glitchRed = outputImage.get();
    let glitchGreen = outputImage.get();
    let glitchBlue = outputImage.get();

    glitchRed.filter(THRESHOLD);
    glitchGreen.filter(INVERT);
    glitchBlue.filter(POSTERIZE, 5);

    outputImage.blend(glitchRed, 0, 0, outputImage.width, outputImage.height, int(random(-10, 10)), int(random(-10, 10)), outputImage.width, outputImage.height, ADD);
    outputImage.blend(glitchGreen, 0, 0, outputImage.width, outputImage.height, int(random(-5, 5)), int(random(-5, 5)), outputImage.width, outputImage.height, LIGHTEST);
    outputImage.blend(glitchBlue, 0, 0, outputImage.width, outputImage.height, int(random(-3, 3)), int(random(-3, 3)), outputImage.width, outputImage.height, DARKEST);

    return outputImage;
}

 -------------------- greyscale.js ------------------------ 

function grayscaleConversion(sourceImage) {
    let grayImage = createImage(sourceImage.width, sourceImage.height);
    grayImage.copy(sourceImage, 0, 0, sourceImage.width, sourceImage.height, 0, 0, grayImage.width, grayImage.height);

    grayImage.loadPixels();
    for (let i = 0; i < grayImage.pixels.length; i += 4) {
        let grayValue = 0.3 * grayImage.pixels[i] + 0.59 * grayImage.pixels[i + 1] + 0.11 * grayImage.pixels[i + 2];
        grayImage.pixels[i] = grayValue;       // Red channel
        grayImage.pixels[i + 1] = grayValue;   // Green channel
        grayImage.pixels[i + 2] = grayValue;   // Blue channel
    }
    grayImage.updatePixels();

    return grayImage;
}


function pixelateImage(sourceImage, blockSize) {
    let pixelatedImage = sourceImage.get();
    pixelatedImage.loadPixels();

    for (let y = 0; y < pixelatedImage.height; y += blockSize) {
        for (let x = 0; x < pixelatedImage.width; x += blockSize) {
            let redSum = 0, greenSum = 0, blueSum = 0;

            // Collect RGB values for the current block
            for (let i = 0; i < blockSize; i++) {
                for (let j = 0; j < blockSize; j++) {
                    let index = ((y + j) * pixelatedImage.width + (x + i)) * 4;
                    redSum += pixelatedImage.pixels[index];
                    greenSum += pixelatedImage.pixels[index + 1];
                    blueSum += pixelatedImage.pixels[index + 2];
                }
            }

            // Compute average color for the block
            let avgRed = redSum / (blockSize * blockSize);
            let avgGreen = greenSum / (blockSize * blockSize);
            let avgBlue = blueSum / (blockSize * blockSize);

            // Set each pixel in the block to the average color
            for (let i = 0; i < blockSize; i++) {
                for (let j = 0; j < blockSize; j++) {
                    let index = ((y + j) * pixelatedImage.width + (x + i)) * 4;
                    pixelatedImage.pixels[index] = avgRed;
                    pixelatedImage.pixels[index + 1] = avgGreen;
                    pixelatedImage.pixels[index + 2] = avgBlue;
                }
            }
        }
    }

    pixelatedImage.updatePixels();
    return pixelatedImage;
}

 -------------------- invertedColor.js ------------------------ 

function invertColors(img) {
    let invertedImage = createImage(img.width, img.height);
    img.loadPixels();
    invertedImage.loadPixels();
    for (let i = 0; i < img.pixels.length; i += 4) {
        invertedImage.pixels[i] = 255 - img.pixels[i];     // Red
        invertedImage.pixels[i + 1] = 255 - img.pixels[i + 1]; // Green
        invertedImage.pixels[i + 2] = 255 - img.pixels[i + 2]; // Blue
        invertedImage.pixels[i + 3] = img.pixels[i + 3];   // Alpha
    }
    invertedImage.updatePixels();
    return invertedImage;
}

 -------------------- main.js ------------------------ 

/*
  Project Overview:
  -----------------
  This project involves the implementation of real-time video capture and image processing techniques using JavaScript and the p5.js library. The primary goal is to allow users to capture a video feed, apply various filters, and perform thresholding operations in different color spaces. The project offers a wide range of filters and manipulations that allow for creative and functional image editing.

  Core Features:
  --------------
  1. **Video Capture:**
     The system captures real-time video from the user's device and displays it on a canvas. The video feed can be frozen (paused) at any point, allowing the user to apply image processing techniques to the captured frame.

  2. **Thresholding Sliders:**
     The project provides control over thresholding for individual RGB channels through three sliders: red, green, and blue. Users can adjust these sliders to control how colors are thresholded, allowing for precise color manipulation.

  3. **Color Space Conversions:**
     Two significant color space conversions are included:
      - **TCbCr Conversion:** Converts the image into the YCbCr color space for enhanced thresholding.
      - **HSV Conversion:** Converts the image into the HSV color space, which is useful for operations involving hue, saturation, and brightness.

  4. **Image Processing Filters:**
     Various image filters are implemented, allowing the user to apply effects such as grayscale conversion, pixelation, sepia, inversion, Gaussian blur, and edge detection (emboss). These filters are used to manipulate the captured frame in real-time, giving users creative control over their images.

  5. **Image Grid and Captions:**
     Processed images are displayed in a grid format. Each grid image is captioned to describe the filter or operation applied. These captions allow users to easily understand the type of manipulation performed on each image.

  6. **Enhanced Pixelation and Vignette:**
     Special filters such as enhanced pixelation and vignette are available to improve the aesthetics of images. These filters add a layer of artistic control to the captured frames.

  Technical Summary:
  ------------------
  The project primarily makes use of the p5.js library for video and image manipulation. Image data is accessed through pixel arrays, allowing for direct modification of each pixel’s color channels. Several functions process the image by looping through its pixels and performing calculations for various effects, including:
    - Grayscale conversion via luminance calculations.
    - Pixelation by averaging blocks of pixels.
    - Channel separation into Red, Green, and Blue channels.

  The thresholding functions give users control over color intensity through sliders. Users can set specific thresholds for the red, green, and blue channels, altering the appearance of their images in a controlled and interactive way. 

  Special effects like sepia, vignette, and pixelation filters provide enhanced aesthetic features. These filters are implemented by manipulating pixel data, adjusting brightness, contrast, or color, and applying advanced visual techniques.

  Conclusion:
  -----------
  This project demonstrates a wide variety of image processing and manipulation techniques, providing users with the ability to capture, edit, and enhance video frames in real time. With a combination of color space conversions, thresholding, and aesthetic filters, this tool can be further extended to include more creative and functional image editing capabilities.
*/
 -------------------- pixelatedExtra.js ------------------------ 

function applyHeavyPixelationFilter(inputImage, pixelSize = 20) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);

    outputImage.loadPixels(); // Load pixel data from inputImage
    let tempPixels = []; // Temporary array for storing pixel data

    // Create a temporary image to hold the pixelated version
    let tempImage = createImage(Math.ceil(inputImage.width / pixelSize), Math.ceil(inputImage.height / pixelSize));
    tempImage.loadPixels();

    // Process each block of pixels
    for (let y = 0; y < tempImage.height; y++) {
        for (let x = 0; x < tempImage.width; x++) {
            // Calculate average color for the pixel block
            let r = 0, g = 0, b = 0;
            let count = 0;
            
            for (let dy = 0; dy < pixelSize; dy++) {
                for (let dx = 0; dx < pixelSize; dx++) {
                    let srcX = x * pixelSize + dx;
                    let srcY = y * pixelSize + dy;

                    if (srcX < inputImage.width && srcY < inputImage.height) {
                        let index = (srcX + srcY * inputImage.width) * 4;
                        r += inputImage.pixels[index];
                        g += inputImage.pixels[index + 1];
                        b += inputImage.pixels[index + 2];
                        count++;
                    }
                }
            }
            
            // Average the color
            r = r / count;
            g = g / count;
            b = b / count;

            let tempIndex = (x + y * tempImage.width) * 4;
            tempImage.pixels[tempIndex] = r;
            tempImage.pixels[tempIndex + 1] = g;
            tempImage.pixels[tempIndex + 2] = b;
            tempImage.pixels[tempIndex + 3] = 255; // Alpha
        }
    }
    
    tempImage.updatePixels();

    // Scale the temporary image back to the original size
    outputImage.copy(tempImage, 0, 0, tempImage.width, tempImage.height, 0, 0, outputImage.width, outputImage.height);

    return outputImage;
}

 -------------------- rgb.js ------------------------ 

function separateRGBChannels(sourceImage) {
    // Create separate images for red, green, and blue channels
    let redImg = createImage(sourceImage.width, sourceImage.height);
    let greenImg = createImage(sourceImage.width, sourceImage.height);
    let blueImg = createImage(sourceImage.width, sourceImage.height);

    redImg.copy(sourceImage, 0, 0, sourceImage.width, sourceImage.height, 0, 0, redImg.width, redImg.height);
    greenImg.copy(sourceImage, 0, 0, sourceImage.width, sourceImage.height, 0, 0, greenImg.width, greenImg.height);
    blueImg.copy(sourceImage, 0, 0, sourceImage.width, sourceImage.height, 0, 0, blueImg.width, blueImg.height);

    redImg.loadPixels();
    greenImg.loadPixels();
    blueImg.loadPixels();

    // Loop through pixels and modify channels
    for (let i = 0; i < redImg.pixels.length; i += 4) {
        // Keep only red in redImg
        greenImg.pixels[i] = 0;
        blueImg.pixels[i] = 0;

        // Keep only green in greenImg
        redImg.pixels[i + 1] = 0;
        blueImg.pixels[i + 1] = 0;

        // Keep only blue in blueImg
        redImg.pixels[i + 2] = 0;
        greenImg.pixels[i + 2] = 0;
    }

    redImg.updatePixels();
    greenImg.updatePixels();
    blueImg.updatePixels();

    return [redImg, greenImg, blueImg];
}

 -------------------- rgbThresholding.js ------------------------ 

// Function for black and white thresholding
function applyBWThreshold(inputImage, threshold) {
    let bwImage = createImage(inputImage.width, inputImage.height);
    bwImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, bwImage.width, bwImage.height);

    bwImage.loadPixels();
    for (let i = 0; i < bwImage.pixels.length; i += 4) {
        let r = bwImage.pixels[i];
        let g = bwImage.pixels[i + 1];
        let b = bwImage.pixels[i + 2];

        // Calculate the grayscale value using the luminosity formula
        let grayValue = 0.299 * r + 0.587 * g + 0.114 * b;

        // If grayscale value exceeds the threshold, set the pixel to white, else black
        let binaryColor = grayValue > threshold ? 255 : 0;

        // Apply binary color to all channels (R, G, B)
        bwImage.pixels[i] = binaryColor;
        bwImage.pixels[i + 1] = binaryColor;
        bwImage.pixels[i + 2] = binaryColor;

        // Keep the original alpha value
        bwImage.pixels[i + 3] = bwImage.pixels[i + 3];
    }
    bwImage.updatePixels();
    
    return bwImage;
}

// Function to Thresholding depths 
function applyColorChannelThreshold(inputImage, threshold) {
    let colorThresholdedImg = createImage(inputImage.width, inputImage.height);
    colorThresholdedImg.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, colorThresholdedImg.width, colorThresholdedImg.height);

    colorThresholdedImg.loadPixels();
    for (let i = 0; i < colorThresholdedImg.pixels.length; i += 4) {
        let r = colorThresholdedImg.pixels[i];
        let g = colorThresholdedImg.pixels[i + 1];
        let b = colorThresholdedImg.pixels[i + 2];

        // Apply thresholds to each channel using sliders
        r = (redThresholdSlider.value() > r) ? 0 : r;
        g = (greenThresholdSlider.value() > g) ? 0 : g;
        b = (blueThresholdSlider.value() > b) ? 0 : b;

        // Set thresholded values to pixels
        colorThresholdedImg.pixels[i] = r;
        colorThresholdedImg.pixels[i + 1] = g;
        colorThresholdedImg.pixels[i + 2] = b;

        // Preserve the original alpha value
        colorThresholdedImg.pixels[i + 3] = colorThresholdedImg.pixels[i + 3];
    }
    colorThresholdedImg.updatePixels();

    return colorThresholdedImg;
}
 -------------------- sepiaFilter.js ------------------------ 

function applySepia(img) {
    let sepiaImage = createImage(img.width, img.height);
    sepiaImage.loadPixels();
    img.loadPixels();

    for (let i = 0; i < img.pixels.length; i += 4) {
        let r = img.pixels[i];
        let g = img.pixels[i + 1];
        let b = img.pixels[i + 2];

        sepiaImage.pixels[i] = r * 0.393 + g * 0.769 + b * 0.189;
        sepiaImage.pixels[i + 1] = r * 0.349 + g * 0.686 + b * 0.168;
        sepiaImage.pixels[i + 2] = r * 0.272 + g * 0.534 + b * 0.131;
        sepiaImage.pixels[i + 3] = img.pixels[i + 3]; // Alpha channel
    }

    sepiaImage.updatePixels();
    return sepiaImage;
}

 -------------------- sketch.js ------------------------ 

// Declaring global variables
let videoStream;
let canvasArray = [];
// Capture buttons
let unFreeze;
let capturing = false;
let frozenImage;
// Sliders to control thresholding
let redThresholdSlider, greenThresholdSlider, blueThresholdSlider;
let tcbrThresholdSlider;
let hsvThresholdSlider;
// Face detection
let detectionCanvas;
let detectedFaces = [];

//Others
let pixelBlockSize = 5;
let currentFaceIndex = 0;

// Image imageCaptions for grid
let imageCaptions = [
    ["Original", "Grayscale", "Pixelated", "Red Channel", "Green Channel", "Blue Channel", "Red Thresholded", "Green Thresholded", "Blue Thresholded", "B&W Thresholded", "TCbCr", "HSV", "Threshold TCbCr", "Threshold HSV","Sepia","Inverted","Emboss","Gaussian Blur","Aesthetic","Hacked","Vignette","Enhanced Pixelation","Halftone","Color Shifting","TimeWarp"]
];

function setup() {
    createCanvas(160 * 4, 140 * 7);
    
    //Creating the videoStream and setting the size for each grid 
    videoStream = createCapture(VIDEO, function () {
        videoStream.size(160, 120);
        for (let i = 0; i < 4 * 5; i++) {
            canvasArray.push(createGraphics(160, 120));
        }
         // Initialize sliders
        pixelationSlider = select('#pixelationSlider');
        halftoneSlider = select('#halftoneSlider');
        colorShiftSlider = select('#colorShiftSlider');
        timeWarpSlider = select('#timeWarpSlider');
        
        
        
        // Save Image button
         let saveImageButton = select('#saveImageButton');
         saveImageButton.mousePressed(saveImage);

        // Capture button
        let captureButton = select('#captureButton');
        captureButton.mousePressed(captureAndApplyFilters);

        // Uncapture Button
        let unFreeze = select('#unFreeze');
        unFreeze.mousePressed(uncaptureAndUnfreeze);

    // Create a container for top sliders
    let topSliderContainer = select('#topSliderContainer');
    topSliderContainer.class('slider-container');
    // Slider intensity
    redThresholdSlider = createSlider(0, 180, 90);
    greenThresholdSlider = createSlider(0, 180, 90);
    blueThresholdSlider = createSlider(0, 180, 90);

    topSliderContainer.child(redThresholdSlider);
    topSliderContainer.child(greenThresholdSlider);
    topSliderContainer.child(blueThresholdSlider);

    // Create a container for bottom sliders
    let bottomSliderContainer = select('#bottomSliderContainer');
    bottomSliderContainer.class('slider-container');
    // Slider intensity
    tcbrThresholdSlider = createSlider(0, 255, 90);
    hsvThresholdSlider = createSlider(0, 255, 90);

    bottomSliderContainer.child(tcbrThresholdSlider);
    bottomSliderContainer.child(hsvThresholdSlider);

    detectionCanvas = createGraphics(160, 120);
        const faceOptions = {
            withLandmarks: true,
            withExpressions: true,
            withDescriptors: true,
            minConfidence: 0.5
          };

        //Hide the videoStream
        videoStream.hide();

    });


    // Activate capture button with "C" key press
    window.addEventListener('keydown', function (e) {
        if (e.key === 'c' || e.key === 'C') {
            captureAndApplyFilters();
        }
    });

    // Activate uncapture button with "V" key press
    window.addEventListener('keydown', function (e) {
        if (e.key === 'v' || e.key === 'V') {
            uncaptureAndUnfreeze();
        }
    });

    // Activate save image button with "V" key press
    window.addEventListener('keydown', function (e) {
        if (e.key === 's' || e.key === 'S') {
            saveImage();
        }
    });    
}
draw();

function draw() {
    background(255);
    if (videoStream.loadedmetadata) {
        let scaledImage = createImage(160, 120);
        scaledImage.copy(videoStream, 0, 0, videoStream.width, videoStream.height, 0, 0, scaledImage.width, scaledImage.height);

      
        displayImage(scaledImage, 0, 0, imageCaptions[0][0]);  // Original
        displayImage(grayscaleConversion(scaledImage), 1, 0, imageCaptions[0][1]);  // Grayscale
        
        displayImage(separateRGBChannels(scaledImage)[0], 0, 1, imageCaptions[0][3]);  // Red Channel
        
       
        displayImage(separateRGBChannels(scaledImage)[1], 1, 1, imageCaptions[0][4]);  // Green Channel
        displayImage(separateRGBChannels(scaledImage)[2], 2, 1, imageCaptions[0][5]);  // Blue Channel
        displayImage(applyColorChannelThreshold(separateRGBChannels(scaledImage)[0], redThresholdSlider.value()), 0, 2, imageCaptions[0][6]);  // Red Thresholded
        displayImage(applyColorChannelThreshold(separateRGBChannels(scaledImage)[1], greenThresholdSlider.value()), 1, 2, imageCaptions[0][7]);  // Green Thresholded
        
     
        displayImage(applyColorChannelThreshold(separateRGBChannels(scaledImage)[2], blueThresholdSlider.value()), 2, 2, imageCaptions[0][8]);  // Blue Thresholded
        displayImage(applyBWThreshold(scaledImage, 128), 3, 2, imageCaptions[0][9]);  // B&W Thresholded
        displayImage(convertToTCbCr(scaledImage), 0, 3, imageCaptions[0][10]);  // TCbCr Image
        displayImage(convertToHSV(scaledImage), 1, 3, imageCaptions[0][11]);  // HSV Image
        
     
        displayImage(applyTCbCrThreshold(scaledImage, tcbrThresholdSlider.value()), 2, 3, imageCaptions[0][12]);  // TCbCr Thresholded
        displayImage(applyHSVThreshold(scaledImage, hsvThresholdSlider.value()), 3, 3, imageCaptions[0][13]);  // HSV Thresholded
        
        displayImage(applyTimeWarpFilter(scaledImage, timeWarpSlider), 0, 4, imageCaptions[0][24]);  // Time Warp     
        displayImage(pixelateImage(scaledImage, pixelBlockSize), 1, 4, imageCaptions[0][2]);  // Pixelated
        displayImage(applySepia(scaledImage), 2, 4, imageCaptions[0][14]);  // Sepia Image
        displayImage(invertColors(scaledImage), 3, 4, imageCaptions[0][15]); // Inverted Colors

      
        displayImage(applyEmbossEffect(scaledImage), 0, 5, imageCaptions[0][16]); // Emboss Effect
        displayImage(applyGaussianBlur(scaledImage), 1, 5, imageCaptions[0][17]); //Gaussian Blur
        displayImage(applyAestheticFilter(scaledImage),2,5,imageCaptions[0][18]); //Aesthetic
        displayImage(applyGlitchFilter(scaledImage), 3, 5, imageCaptions[0][19]); //Hacked
       
        displayImage(applyVignetteFilter(scaledImage), 0, 6, imageCaptions[0][20]); //Vignette
        displayImage(applyHeavyPixelationFilter(scaledImage, pixelationSlider.value()), 1, 6, imageCaptions[0][21]);  //Heavy Pixelation
        displayImage(applyColorHalftoneFilter(scaledImage, halftoneSlider.value()), 2, 6, imageCaptions[0][22]); // Color Halftone
        displayImage(applyColorShiftingFilter(scaledImage, colorShiftSlider.value()), 3, 6, imageCaptions[0][23]); //Color Shifting
    }
}




function displayImage(img, col, row, caption) {
    let index = row * 2 + col;

    // Clear the canvas before drawing the new image
    canvasArray[index].clear();

    let x = col * 0;
    let y = row * 0;
    // Draw the image on the canvas
    canvasArray[index].image(img, 0, 0, 158, 118); // Leave 1-pixel border

    // Draw the caption array
    let captionX = x + 160 / 2; 
    let captionY = y + 120 - 5; 
    canvasArray[index].textAlign(CENTER);
    canvasArray[index].textSize(10);
    canvasArray[index].fill(255);
    canvasArray[index].text(caption, captionX, captionY);

    // Draw the canvas on the main canvas
    image(canvasArray[index], col * 160, row * 140);
}



function captureAndApplyFilters() {
    if (!capturing) {
        // Pause the videoStream to capture the current frame
        videoStream.pause();

        // Loop through all the grids
        for (let row = 0; row < 5; row++) {
            for (let col = 0; col < 3; col++) {
                if (col !== 2) {
                    let frozenImage = canvasArray[row * 3 + col].get();
                }
            }
        }

        // Set capturing to true
        capturing = true;
    } else {
        // Resume the videoStream after resetting frames
        videoStream.play();
        for (let i = 0; i < canvasArray.length; i++) {
            if (canvasArray[i]) {
                canvasArray[i].clear();
            }
        }

        // Set capturing to false
        capturing = false;
    }
}

function uncaptureAndUnfreeze() {
    // Resume the videoStream after resetting frames
    videoStream.play();

    // Clear the canvasArray
    for (let i = 0; i < canvasArray.length; i++) {
        if (canvasArray[i]) {
            canvasArray[i].clear();
        }
    }

    // Set capturing to false
    capturing = false;

    // Unfreeze the videoStream
    unfreeze();
}


function unfreeze() {
    videoStream.loop(); 
}

function saveImage() {
    // Call videoStream pause to get the frame
    videoStream.pause();

    // Create a graphics object to hold the entire grid
    let fullGridImage = createGraphics(width, height);

// Loop through all the grids to capture all the grid
for (let row = 0; row < 8; row++) {
    for (let col = 0; col < 4; col++) {
        let frozenImage = canvasArray[row * 2 + col].get();
        fullGridImage.image(frozenImage, col * 160, row * 140);
    }
}
    // Save the full grid image as a file
    fullGridImage.save("full_grid_image.png");
    videoStream.play();
}

 -------------------- timeWarp.js ------------------------ 

function applyTimeWarpFilter(img, intensity) {
    // Example implementation for time warp filter
    let timeWarpedImage = createImage(img.width, img.height);
    timeWarpedImage.loadPixels();
    img.loadPixels();

    let warpIntensity = intensity.value(); // Get the slider value

    for (let y = 0; y < img.height; y++) {
        for (let x = 0; x < img.width; x++) {
            let index = (x + y * img.width) * 4;
            // Modify pixel positions based on warpIntensity
            let warpX = x + sin(y * 0.05) * warpIntensity;
            let warpY = y + cos(x * 0.05) * warpIntensity;

            warpX = constrain(warpX, 0, img.width - 1);
            warpY = constrain(warpY, 0, img.height - 1);

            let warpIndex = (int(warpX) + int(warpY) * img.width) * 4;
            timeWarpedImage.pixels[index] = img.pixels[warpIndex];
            timeWarpedImage.pixels[index + 1] = img.pixels[warpIndex + 1];
            timeWarpedImage.pixels[index + 2] = img.pixels[warpIndex + 2];
            timeWarpedImage.pixels[index + 3] = img.pixels[warpIndex + 3];
        }
    }
    timeWarpedImage.updatePixels();
    return timeWarpedImage;
}

 -------------------- vignette.js ------------------------ 

function applyVignetteFilter(inputImage) {
    let outputImage = createImage(inputImage.width, inputImage.height);
    outputImage.copy(inputImage, 0, 0, inputImage.width, inputImage.height, 0, 0, outputImage.width, outputImage.height);

    outputImage.loadPixels();
    let centerX = outputImage.width / 2;
    let centerY = outputImage.height / 2;
    let maxDist = dist(0, 0, centerX, centerY);
    let vignetteStrength = 0.75; // Adjust strength of vignette effect

    for (let y = 0; y < outputImage.height; y++) {
        for (let x = 0; x < outputImage.width; x++) {
            let d = dist(x, y, centerX, centerY);
            let factor = constrain(d / maxDist, 0, 1);
            let index = (x + y * outputImage.width) * 4;
            
            // Calculate vignette effect
            let vignetteFactor = 1 - Math.pow(factor, 2) * vignetteStrength;
            
            outputImage.pixels[index] *= vignetteFactor;     // Red Channel
            outputImage.pixels[index + 1] *= vignetteFactor; // Green Channel
            outputImage.pixels[index + 2] *= vignetteFactor; // Blue Channel
        }
    }
    outputImage.updatePixels();

    return outputImage;
}
